{
  "collection": {
    "_": {
      "postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "exporter_id": "27886780"
    },
    "item": [
      {
        "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
        "name": "Using npm packages",
        "item": [
          {
            "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
            "name": "Using human-names: Hello",
            "request": {
              "url": {
                "path": [
                  "hello",
                  "{{name}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "const names = require('human-names');",
                    "",
                    "const name = names.maleRandom();",
                    "pm.variables.set('name', name);",
                    ""
                  ],
                  "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                  "type": "text/javascript",
                  "exec": [
                    "const assert = require(\"chai\");",
                    "[",
                    "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                    "  () => assert.equal(pm.response.status, 201)",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                }
              }
            ]
          },
          {
            "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
            "name": "Using js-base64: encode and decode",
            "request": {
              "url": {
                "path": [
                  "base64",
                  "decode"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{{encoded}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                  "type": "text/javascript",
                  "exec": [
                    "const text = 'Hello npm2postman!';",
                    "",
                    "pm.variables.set('text', text);",
                    "pm.variables.set('encoded', require('js-base64').encode(text));",
                    ""
                  ],
                  "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                    ""
                  ],
                  "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                }
              }
            ]
          },
          {
            "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
            "name": "Using random-js: even or odd number",
            "request": {
              "url": {
                "path": [
                  "even-or-odd",
                  "{{number}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                  "type": "text/javascript",
                  "exec": [
                    "const randomjs = require(\"random-js\");",
                    "const random = new randomjs.Random();",
                    "pm.variables.set(\"number\", random.integer(8, 80));",
                    ""
                  ],
                  "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                  "type": "text/javascript",
                  "exec": [
                    "[",
                    "  () => pm.response.code == 200,",
                    "  () => {",
                    "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                    "    pm.response.body() === expected;",
                    "  }",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "4e9b594e-e03d-487b-b329-41b1d2a7ed75",
          "type": "text/javascript",
          "exec": [
            "const importedPackages = pm.collectionVariables.get(\"imported-packages\");",
            "const installedPackages = pm.collectionVariables.get(\"installed-packages\");",
            "const npm2postmanUrl = pm.collectionVariables.get(\"npm2postman-url\") || \"http://localhost:9999/packages\";",
            "",
            "if (importedPackages) {",
            "  if (installedPackages === importedPackages) {",
            "    eval(pm.collectionVariables.get(\"packages-code\"));",
            "    return;",
            "  }",
            "  pm.sendRequest(`${npm2postmanUrl}/${importedPackages}`, (error, response) => {",
            "    if (!error && response.code == 200) {",
            "      pm.collectionVariables.set(\"packages-code\", response.text());",
            "      pm.collectionVariables.set(\"installed-packages\", importedPackages);",
            "      eval(response.text());",
            "    } else {",
            "      console.log(`error: ${JSON.stringify(error)}`);",
            "    }",
            "  });",
            "}"
          ],
          "_lastExecutionId": "944c328e-8e8c-4857-ad57-c46f86ff4e2e"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "34bd5e07-ace8-46c5-a253-c13322dd36a9",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "dcf2bcc6-5391-42af-bf87-5e947483b689"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "",
        "key": "NPM_PACKAGES_SERVER_TO_POSTMAN_URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "imported-packages"
      },
      {
        "type": "any",
        "value": "",
        "key": "packages-code"
      },
      {
        "type": "any",
        "value": "",
        "key": "installed-packages"
      }
    ],
    "info": {
      "_postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "name": "Example",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "2843b2d2-11bc-4c4f-a6f7-f51e1c28e6c0",
    "values": []
  },
  "globals": {
    "id": "e297139e-778c-4a7c-86b5-32d91ac92352",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 18,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686863280647,
      "completed": 1686863280809
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b22f04c-15e7-4fa8-8abf-c6f86ac26f0e",
          "httpRequestId": "da041902-2f6d-4dc0-adfe-dd2728a8e2d6"
        },
        "item": {
          "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'human-names'",
              "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
              "id": "b07fa18b-a0ef-45c8-b819-f1cf1e7fcab6",
              "timestamp": 1686863280686,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bname%7D%7D"
            ],
            "host": [
              "hello"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "658a5198-d92b-43f2-aa4e-3f25b7c80d26",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body))",
            "skipped": false
          },
          {
            "assertion": "() => assert.equal(pm.response.status, 201)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ae9717f9-ba6f-4a81-9c7b-fbb821dbb18d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f797a44f-587a-42b2-ae74-4f28c9f2f8d0"
        },
        "item": {
          "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'js-base64'",
              "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
              "id": "effe9809-f608-4381-9b2d-1f10838dfe7a",
              "timestamp": 1686863280740,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "decode"
            ],
            "host": [
              "base64"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c152d09-3f97-4de6-9938-a432964fb9eb",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{encoded}}"
          }
        },
        "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.body() == pm.variables.get('text')",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "76984db5-0718-47d3-9a81-03f9f81f9dad",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ef0d4bc-c97e-48a7-b71a-ab2bfc5f89ef"
        },
        "item": {
          "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'random-js'",
              "checksum": "d42c9aae5735779212c2ce4c761e2b35",
              "id": "10702c99-a4b6-4e5b-801d-b0e8b8d69f6a",
              "timestamp": 1686863280781,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bnumber%7D%7D"
            ],
            "host": [
              "even-or-odd"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d3b418fc-3293-4ac5-886e-14778ecafffa",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.code == 200",
            "skipped": false
          },
          {
            "assertion": "() => {\n    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";\n    pm.response.body() === expected;\n  }",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'human-names'",
          "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
          "id": "b07fa18b-a0ef-45c8-b819-f1cf1e7fcab6",
          "timestamp": 1686863280686,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b22f04c-15e7-4fa8-8abf-c6f86ac26f0e",
          "scriptId": "1c086c21-2aa8-4f92-80a2-4996b2b4b804"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "f816a7dc7007e05a5ca73e12e540c2e6",
          "id": "37dca706-640f-462e-b3b1-f00eface5d57",
          "timestamp": 1686863280702,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b22f04c-15e7-4fa8-8abf-c6f86ac26f0e",
          "httpRequestId": "da041902-2f6d-4dc0-adfe-dd2728a8e2d6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'js-base64'",
          "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
          "id": "effe9809-f608-4381-9b2d-1f10838dfe7a",
          "timestamp": 1686863280740,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "ref": "ae9717f9-ba6f-4a81-9c7b-fbb821dbb18d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "scriptId": "a7ee0c91-35c0-4ed4-8820-31505de4e008"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///base64/decode\"",
          "stack": "Error: Invalid URI \"http:///base64/decode\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "09f492d62620587ee5308e2c025ba0a5",
          "id": "b1702e7d-df3a-414c-9845-1c10735b7765",
          "timestamp": 1686863280749,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "ref": "ae9717f9-ba6f-4a81-9c7b-fbb821dbb18d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f797a44f-587a-42b2-ae74-4f28c9f2f8d0"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'random-js'",
          "checksum": "d42c9aae5735779212c2ce4c761e2b35",
          "id": "10702c99-a4b6-4e5b-801d-b0e8b8d69f6a",
          "timestamp": 1686863280781,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "ref": "76984db5-0718-47d3-9a81-03f9f81f9dad",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "scriptId": "94f071bb-3b6f-4d6f-a534-577ba3520580"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "8ff661d02c6c267e191cee40fb54c835",
          "id": "8f0ed518-78b9-4545-a049-b0e1b1f3efe9",
          "timestamp": 1686863280787,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
              }
            }
          ]
        },
        "parent": {
          "id": "ac7e186e-29dc-4755-af94-49cabb58b16f",
          "name": "Using npm packages",
          "item": [
            {
              "id": "fff2c23a-caa0-4913-80b6-8ee33bdd7316",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1c086c21-2aa8-4f92-80a2-4996b2b4b804",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e90641cf-3e89-480f-acb0-4fc5c56eec2f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "10d559e3-e4b5-4c61-9b21-34f3e0c43b6e",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ed3d5c0f-c7ea-46b4-8140-a7ba78a0a214"
                  }
                }
              ]
            },
            {
              "id": "db68b1b6-91cc-4808-94d1-609fd9dc193f",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7ee0c91-35c0-4ed4-8820-31505de4e008",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "e699e469-9278-44b7-8490-838f3953914e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "23662dc5-3b58-4b3d-9b75-70acab537c5f",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "575794a0-8c7d-4fab-9a4e-192a9ab5649c"
                  }
                }
              ]
            },
            {
              "id": "0f7b6e3e-80f8-4ef9-a6f8-cb7c4f3a5f2b",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "94f071bb-3b6f-4d6f-a534-577ba3520580",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "11eeebee-0ed3-4cab-9841-d54c90c3d2d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5eb23cdb-e7c4-49ea-8485-2ca182a2fd9b",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "320a86ba-d1cc-48da-8ba9-4d1179a89982"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8cf626f3-9139-4672-9e23-1fd34a361b82",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dfe4ab47-ff81-47d7-8c54-17e741924f15"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d01ae645-ddea-4fba-bcf9-d1ae8cd6d96a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "77b4d23d-f8a0-4fd5-b071-036fd230c66f"
              }
            }
          ]
        },
        "cursor": {
          "ref": "76984db5-0718-47d3-9a81-03f9f81f9dad",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ef0d4bc-c97e-48a7-b71a-ab2bfc5f89ef"
        }
      }
    ],
    "error": null
  }
}