{
  "collection": {
    "_": {
      "postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "exporter_id": "27886780"
    },
    "item": [
      {
        "id": "62d0ae33-7cf7-4215-8570-4237de042071",
        "name": "Using npm packages",
        "item": [
          {
            "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
            "name": "Using human-names: Hello",
            "request": {
              "url": {
                "path": [
                  "hello",
                  "{{name}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "const names = require('human-names');",
                    "",
                    "const name = names.maleRandom();",
                    "pm.variables.set('name', name);",
                    ""
                  ],
                  "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                  "type": "text/javascript",
                  "exec": [
                    "const assert = require(\"chai\");",
                    "[",
                    "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                    "  () => assert.equal(pm.response.status, 201)",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                }
              }
            ]
          },
          {
            "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
            "name": "Using js-base64: encode and decode",
            "request": {
              "url": {
                "path": [
                  "base64",
                  "decode"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{{encoded}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                  "type": "text/javascript",
                  "exec": [
                    "const text = 'Hello npm2postman!';",
                    "",
                    "pm.variables.set('text', text);",
                    "pm.variables.set('encoded', require('js-base64').encode(text));",
                    ""
                  ],
                  "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                    ""
                  ],
                  "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                }
              }
            ]
          },
          {
            "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
            "name": "Using random-js: even or odd number",
            "request": {
              "url": {
                "path": [
                  "even-or-odd",
                  "{{number}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                  "type": "text/javascript",
                  "exec": [
                    "const randomjs = require(\"random-js\");",
                    "const random = new randomjs.Random();",
                    "pm.variables.set(\"number\", random.integer(8, 80));",
                    ""
                  ],
                  "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                  "type": "text/javascript",
                  "exec": [
                    "[",
                    "  () => pm.response.code == 200,",
                    "  () => {",
                    "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                    "    pm.response.body() === expected;",
                    "  }",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6213add1-776b-403a-85c4-499f69413655",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "efc45e06-23ad-4386-8c06-a98e3b69ff53",
          "type": "text/javascript",
          "exec": [
            "const importedPackages = pm.collectionVariables.get(\"imported-packages\");",
            "const installedPackages = pm.collectionVariables.get(\"installed-packages\");",
            "const npm2postmanUrl = pm.collectionVariables.get(\"npm2postman-url\") || \"http://localhost:9999/packages\";",
            "",
            "if (importedPackages) {",
            "  if (installedPackages === importedPackages) {",
            "    eval(pm.collectionVariables.get(\"packages-code\"));",
            "    return;",
            "  }",
            "  pm.sendRequest(`${npm2postmanUrl}/${importedPackages}`, (error, response) => {",
            "    if (!error && response.code == 200) {",
            "      pm.collectionVariables.set(\"packages-code\", response.text());",
            "      pm.collectionVariables.set(\"installed-packages\", importedPackages);",
            "      eval(response.text());",
            "    } else {",
            "      console.log(`error: ${JSON.stringify(error)}`);",
            "    }",
            "  });",
            "}"
          ],
          "_lastExecutionId": "101ef62a-475a-4816-aa96-373ae91ffb71"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "34df69e8-8c0b-42f2-bca9-5cc4c02d2a34",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "74cf8a70-7c1a-440f-b31f-d0dab3a2da88"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "",
        "key": "NPM_PACKAGES_SERVER_TO_POSTMAN_URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "imported-packages"
      },
      {
        "type": "any",
        "value": "",
        "key": "packages-code"
      },
      {
        "type": "any",
        "value": "",
        "key": "installed-packages"
      }
    ],
    "info": {
      "_postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "name": "Example",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "83d9e1ce-a8b8-4173-9b61-aec2ed4c684a",
    "values": []
  },
  "globals": {
    "id": "5b411270-e449-46d1-a26c-83513bbea36d",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 18,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686863461039,
      "completed": 1686863461200
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "78a32b74-4dd1-4561-ad50-93d732d73125",
          "httpRequestId": "228db297-7185-47ea-9a24-f1ec3475cd0a"
        },
        "item": {
          "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'human-names'",
              "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
              "id": "18740af9-a32d-4eba-b15f-915d4e75f12c",
              "timestamp": 1686863461072,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bname%7D%7D"
            ],
            "host": [
              "hello"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "875182dc-0fe4-4ff5-872b-e97f0924ba7a",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body))",
            "skipped": false
          },
          {
            "assertion": "() => assert.equal(pm.response.status, 201)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98d1bd8f-78d9-4dfc-aca9-db405a00365d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "17bc4e3d-5096-40bb-adc7-45650fd8d5c1"
        },
        "item": {
          "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'js-base64'",
              "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
              "id": "1d15d151-b066-43b5-840a-311bb1849eea",
              "timestamp": 1686863461127,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "decode"
            ],
            "host": [
              "base64"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1602119f-47c4-4a10-b2cf-7f5bf9476a18",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{encoded}}"
          }
        },
        "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.body() == pm.variables.get('text')",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2dc1c385-c237-4af7-bf57-1b1d837ba866",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "059faa4b-ff87-402f-90be-4d049bab168b"
        },
        "item": {
          "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'random-js'",
              "checksum": "d42c9aae5735779212c2ce4c761e2b35",
              "id": "d9a6f959-87b1-4db7-a25e-0fd06668a5ff",
              "timestamp": 1686863461164,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bnumber%7D%7D"
            ],
            "host": [
              "even-or-odd"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d7f7670d-d1d9-4c73-bab1-71f488df4edf",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.code == 200",
            "skipped": false
          },
          {
            "assertion": "() => {\n    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";\n    pm.response.body() === expected;\n  }",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'human-names'",
          "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
          "id": "18740af9-a32d-4eba-b15f-915d4e75f12c",
          "timestamp": 1686863461072,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "78a32b74-4dd1-4561-ad50-93d732d73125",
          "scriptId": "7cf8ae4a-8139-4204-816c-05d822e8d37e"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "f816a7dc7007e05a5ca73e12e540c2e6",
          "id": "7964c214-80c4-434a-8f8f-a7f595decc11",
          "timestamp": 1686863461088,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "78a32b74-4dd1-4561-ad50-93d732d73125",
          "httpRequestId": "228db297-7185-47ea-9a24-f1ec3475cd0a"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'js-base64'",
          "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
          "id": "1d15d151-b066-43b5-840a-311bb1849eea",
          "timestamp": 1686863461127,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "ref": "98d1bd8f-78d9-4dfc-aca9-db405a00365d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "scriptId": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///base64/decode\"",
          "stack": "Error: Invalid URI \"http:///base64/decode\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "09f492d62620587ee5308e2c025ba0a5",
          "id": "079c95a9-e0ed-402b-8dd4-b7135fd87a7e",
          "timestamp": 1686863461133,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "ref": "98d1bd8f-78d9-4dfc-aca9-db405a00365d",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "17bc4e3d-5096-40bb-adc7-45650fd8d5c1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'random-js'",
          "checksum": "d42c9aae5735779212c2ce4c761e2b35",
          "id": "d9a6f959-87b1-4db7-a25e-0fd06668a5ff",
          "timestamp": 1686863461164,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "ref": "2dc1c385-c237-4af7-bf57-1b1d837ba866",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "scriptId": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "8ff661d02c6c267e191cee40fb54c835",
          "id": "bfe1d8a1-bd18-4be9-90a4-0e04a801a9a1",
          "timestamp": 1686863461182,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
              }
            }
          ]
        },
        "parent": {
          "id": "62d0ae33-7cf7-4215-8570-4237de042071",
          "name": "Using npm packages",
          "item": [
            {
              "id": "554f4029-5134-4a72-8a86-a68dd1b47dbb",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7cf8ae4a-8139-4204-816c-05d822e8d37e",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "e3bf99be-1fff-49b8-a67e-6e8cf4d25fe8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5c230e2d-5647-4ab0-83fc-160ae6d56c91",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "30e43550-9bcd-484d-a2ea-8ac920e99add"
                  }
                }
              ]
            },
            {
              "id": "a8e5ea72-9bfc-481e-81c2-764c04530440",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14d2d015-b9a9-4983-9a7c-3e4f59fb2889",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "25f85424-c0b4-4e33-b8d4-b861ca82b2cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a0308a9-c78f-4379-a82a-daf87375a637",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "2923af73-4646-47b0-ad7f-834f5085e7c1"
                  }
                }
              ]
            },
            {
              "id": "ee31edf2-7a93-4d9f-ac96-8b0d22868c03",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "33a2ceef-b4b0-4bbc-b863-7b5d1ef90801",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "2cf26836-92fe-4892-be1e-a6f511d1b6cf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af18d30f-712f-4508-87c9-d5788ca3c264",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "ae316272-743c-4754-aa99-e56a3346d04f"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7f39ce42-537d-4b6b-b77b-3377593d88e4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "13936966-7eeb-4ac2-869e-948c52e6ae9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6213add1-776b-403a-85c4-499f69413655",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "423e334b-42df-4049-8044-d8b4702f0598"
              }
            }
          ]
        },
        "cursor": {
          "ref": "2dc1c385-c237-4af7-bf57-1b1d837ba866",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "059faa4b-ff87-402f-90be-4d049bab168b"
        }
      }
    ],
    "error": null
  }
}