{
  "collection": {
    "_": {
      "postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "exporter_id": "27886780"
    },
    "item": [
      {
        "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
        "name": "Using npm packages",
        "item": [
          {
            "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
            "name": "Using human-names: Hello",
            "request": {
              "url": {
                "path": [
                  "hello",
                  "{{name}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "const names = require('human-names');",
                    "",
                    "const name = names.maleRandom();",
                    "pm.variables.set('name', name);",
                    ""
                  ],
                  "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                  "type": "text/javascript",
                  "exec": [
                    "const assert = require(\"chai\");",
                    "[",
                    "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                    "  () => assert.equal(pm.response.status, 201)",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                }
              }
            ]
          },
          {
            "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
            "name": "Using js-base64: encode and decode",
            "request": {
              "url": {
                "path": [
                  "base64",
                  "decode"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{{encoded}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                  "type": "text/javascript",
                  "exec": [
                    "const text = 'Hello npm2postman!';",
                    "",
                    "pm.variables.set('text', text);",
                    "pm.variables.set('encoded', require('js-base64').encode(text));",
                    ""
                  ],
                  "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                    ""
                  ],
                  "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                }
              }
            ]
          },
          {
            "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
            "name": "Using random-js: even or odd number",
            "request": {
              "url": {
                "path": [
                  "even-or-odd",
                  "{{number}}"
                ],
                "host": [
                  "{{URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                  "type": "text/javascript",
                  "exec": [
                    "const randomjs = require(\"random-js\");",
                    "const random = new randomjs.Random();",
                    "pm.variables.set(\"number\", random.integer(8, 80));",
                    ""
                  ],
                  "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                  "type": "text/javascript",
                  "exec": [
                    "[",
                    "  () => pm.response.code == 200,",
                    "  () => {",
                    "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                    "    pm.response.body() === expected;",
                    "  }",
                    "].forEach((a) => pm.test(a));",
                    ""
                  ],
                  "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "626ce505-5407-4909-8792-2f08121002eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "e578f709-2d2d-4e4d-a2fa-0d5b4cad9102",
          "type": "text/javascript",
          "exec": [
            "const importedPackages = pm.collectionVariables.get(\"imported-packages\");",
            "const installedPackages = pm.collectionVariables.get(\"installed-packages\");",
            "const npm2postmanUrl = pm.collectionVariables.get(\"npm2postman-url\") || \"http://localhost:9999/packages\";",
            "",
            "if (importedPackages) {",
            "  if (installedPackages === importedPackages) {",
            "    eval(pm.collectionVariables.get(\"packages-code\"));",
            "    return;",
            "  }",
            "  pm.sendRequest(`${npm2postmanUrl}/${importedPackages}`, (error, response) => {",
            "    if (!error && response.code == 200) {",
            "      pm.collectionVariables.set(\"packages-code\", response.text());",
            "      pm.collectionVariables.set(\"installed-packages\", importedPackages);",
            "      eval(response.text());",
            "    } else {",
            "      console.log(`error: ${JSON.stringify(error)}`);",
            "    }",
            "  });",
            "}"
          ],
          "_lastExecutionId": "595106ac-747e-4f39-bbd2-e78a3cef3702"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "db776340-0004-4bdf-b18a-827ab2cc97d3",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "ec95fa99-8df0-4f42-b61f-4785887fe7e5"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "",
        "key": "NPM_PACKAGES_SERVER_TO_POSTMAN_URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "URL"
      },
      {
        "type": "string",
        "value": "",
        "key": "imported-packages"
      },
      {
        "type": "any",
        "value": "",
        "key": "packages-code"
      },
      {
        "type": "any",
        "value": "",
        "key": "installed-packages"
      }
    ],
    "info": {
      "_postman_id": "8282ebbd-f304-42b7-b640-76a56cdcc30c",
      "name": "Example",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "502ef793-cb6f-44de-a93d-14e5feeb143e",
    "values": []
  },
  "globals": {
    "id": "b0cdce02-1e4b-45d1-80bb-8ed19926759c",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 18,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686863540977,
      "completed": 1686863541137
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8072c53-9ccd-4a2e-97e2-4a63752d45ca",
          "httpRequestId": "6d94a46e-f6a2-4040-8ac3-4a8872aef412"
        },
        "item": {
          "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'human-names'",
              "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
              "id": "15da6df5-b430-4f3d-a7e3-232562937a93",
              "timestamp": 1686863541008,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bname%7D%7D"
            ],
            "host": [
              "hello"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6cb57a81-45e4-492f-a3e0-23c8b9df88f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body))",
            "skipped": false
          },
          {
            "assertion": "() => assert.equal(pm.response.status, 201)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed59c6c9-c9ec-4e2d-822f-83be35ce38a5",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d86f6f0a-2e2a-4f5f-ac09-d2398b658ea6"
        },
        "item": {
          "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'js-base64'",
              "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
              "id": "93fd9eeb-7920-49ff-929b-cc423889bb5d",
              "timestamp": 1686863541069,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "decode"
            ],
            "host": [
              "base64"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "86671dad-ae77-41cf-a22e-4d592aa45f27",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{encoded}}"
          }
        },
        "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.body() == pm.variables.get('text')",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fe556928-cf81-4e4b-91ad-17ef23630544",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a3083915-5c26-4373-9048-6347b2f6bc6c"
        },
        "item": {
          "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Cannot find module 'random-js'",
              "checksum": "d42c9aae5735779212c2ce4c761e2b35",
              "id": "0cd1ceee-f52d-4138-899b-98ba0ae4bbda",
              "timestamp": 1686863541111,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "%7B%7Bnumber%7D%7D"
            ],
            "host": [
              "even-or-odd"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df29629f-ec31-4c9d-9ff2-174ea502534b",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
        "requestError": {},
        "assertions": [
          {
            "assertion": "() => pm.response.code == 200",
            "skipped": false
          },
          {
            "assertion": "() => {\n    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";\n    pm.response.body() === expected;\n  }",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'human-names'",
          "checksum": "d49a83e59f0a5b184ead4e7e95bd3376",
          "id": "15da6df5-b430-4f3d-a7e3-232562937a93",
          "timestamp": 1686863541008,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8072c53-9ccd-4a2e-97e2-4a63752d45ca",
          "scriptId": "a7543f4e-494a-4bca-a537-9354484de28a"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///hello/%7B%7Bname%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "f816a7dc7007e05a5ca73e12e540c2e6",
          "id": "b89740f5-d492-488e-8211-1acee2de65c8",
          "timestamp": 1686863541024,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
          "name": "Using human-names: Hello",
          "request": {
            "url": {
              "path": [
                "hello",
                "{{name}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "const names = require('human-names');",
                  "",
                  "const name = names.maleRandom();",
                  "pm.variables.set('name', name);",
                  ""
                ],
                "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                "type": "text/javascript",
                "exec": [
                  "const assert = require(\"chai\");",
                  "[",
                  "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                  "  () => assert.equal(pm.response.status, 201)",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8072c53-9ccd-4a2e-97e2-4a63752d45ca",
          "httpRequestId": "6d94a46e-f6a2-4040-8ac3-4a8872aef412"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'js-base64'",
          "checksum": "c6c5b0ddcd08853456781b2e1f295a61",
          "id": "93fd9eeb-7920-49ff-929b-cc423889bb5d",
          "timestamp": 1686863541069,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "ref": "ed59c6c9-c9ec-4e2d-822f-83be35ce38a5",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "scriptId": "31b67773-a5cd-4398-a61f-0fd8b5b49a83"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///base64/decode\"",
          "stack": "Error: Invalid URI \"http:///base64/decode\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "09f492d62620587ee5308e2c025ba0a5",
          "id": "c2186d50-ab2f-4a51-ae27-ad0cb3325a33",
          "timestamp": 1686863541077,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
          "name": "Using js-base64: encode and decode",
          "request": {
            "url": {
              "path": [
                "base64",
                "decode"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{encoded}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                "type": "text/javascript",
                "exec": [
                  "const text = 'Hello npm2postman!';",
                  "",
                  "pm.variables.set('text', text);",
                  "pm.variables.set('encoded', require('js-base64').encode(text));",
                  ""
                ],
                "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                  ""
                ],
                "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "ref": "ed59c6c9-c9ec-4e2d-822f-83be35ce38a5",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d86f6f0a-2e2a-4f5f-ac09-d2398b658ea6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Cannot find module 'random-js'",
          "checksum": "d42c9aae5735779212c2ce4c761e2b35",
          "id": "0cd1ceee-f52d-4138-899b-98ba0ae4bbda",
          "timestamp": 1686863541111,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "ref": "fe556928-cf81-4e4b-91ad-17ef23630544",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "scriptId": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"",
          "stack": "Error: Invalid URI \"http:///even-or-odd/%7B%7Bnumber%7D%7D\"\n    at Request.init (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:399:31)\n    at new Request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js:226:8)\n    at request (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js:47:10)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:84:23\n    at wrapper (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:271:20)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5793:24)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setCertificate (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:50:20)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:79:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at next (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5795:13)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:327:20\n    at setProxy (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:31:9)\n    at /home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js:76:13\n    at nextTask (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5787:13)\n    at Object.waterfall (/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js:5798:9)",
          "checksum": "8ff661d02c6c267e191cee40fb54c835",
          "id": "55032646-1c14-47db-bc69-e1d837ca1da6",
          "timestamp": 1686863541121,
          "stacktrace": [
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-request/index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/postman-runtime/lib/requester/request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "/home/mxlinux/projects/npm-packages-server-to-postman/example/node_modules/async/dist/async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
          "name": "Using random-js: even or odd number",
          "request": {
            "url": {
              "path": [
                "even-or-odd",
                "{{number}}"
              ],
              "host": [
                "{{URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                "type": "text/javascript",
                "exec": [
                  "const randomjs = require(\"random-js\");",
                  "const random = new randomjs.Random();",
                  "pm.variables.set(\"number\", random.integer(8, 80));",
                  ""
                ],
                "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                "type": "text/javascript",
                "exec": [
                  "[",
                  "  () => pm.response.code == 200,",
                  "  () => {",
                  "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                  "    pm.response.body() === expected;",
                  "  }",
                  "].forEach((a) => pm.test(a));",
                  ""
                ],
                "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
              }
            }
          ]
        },
        "parent": {
          "id": "c61885c1-6fff-46a6-8dfa-f828a5715e7c",
          "name": "Using npm packages",
          "item": [
            {
              "id": "0fa1bef9-47ad-42bd-bf91-5d57e3959f81",
              "name": "Using human-names: Hello",
              "request": {
                "url": {
                  "path": [
                    "hello",
                    "{{name}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a7543f4e-494a-4bca-a537-9354484de28a",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "const names = require('human-names');",
                      "",
                      "const name = names.maleRandom();",
                      "pm.variables.set('name', name);",
                      ""
                    ],
                    "_lastExecutionId": "a259c187-c9bc-4fcf-8c26-36d1403fb966"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "46bdd23b-5646-43c8-b60d-e17746d38df3",
                    "type": "text/javascript",
                    "exec": [
                      "const assert = require(\"chai\");",
                      "[",
                      "  () => assert.isOk(/Hello [A-Z][a-z]+!/.exec(pm.response.body)),",
                      "  () => assert.equal(pm.response.status, 201)",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "2ab75f9e-5bc3-4910-920f-4e5e84ed949c"
                  }
                }
              ]
            },
            {
              "id": "1d5ce9ee-ebde-4ed3-83be-f3244fd7df3d",
              "name": "Using js-base64: encode and decode",
              "request": {
                "url": {
                  "path": [
                    "base64",
                    "decode"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{encoded}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "31b67773-a5cd-4398-a61f-0fd8b5b49a83",
                    "type": "text/javascript",
                    "exec": [
                      "const text = 'Hello npm2postman!';",
                      "",
                      "pm.variables.set('text', text);",
                      "pm.variables.set('encoded', require('js-base64').encode(text));",
                      ""
                    ],
                    "_lastExecutionId": "191c5dc6-a7e6-4ac3-822b-1e8eebae8e0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "512722b2-ac9c-4227-b451-e8085aab6a38",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(() => pm.response.body() == pm.variables.get('text'));",
                      ""
                    ],
                    "_lastExecutionId": "513da57b-6f21-47dc-b5e2-8dbf8e0b91b1"
                  }
                }
              ]
            },
            {
              "id": "d3242cc4-46b5-4723-a699-268f9ac0d8aa",
              "name": "Using random-js: even or odd number",
              "request": {
                "url": {
                  "path": [
                    "even-or-odd",
                    "{{number}}"
                  ],
                  "host": [
                    "{{URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0f657af5-a06b-4f53-a18a-7f3bb15e71f3",
                    "type": "text/javascript",
                    "exec": [
                      "const randomjs = require(\"random-js\");",
                      "const random = new randomjs.Random();",
                      "pm.variables.set(\"number\", random.integer(8, 80));",
                      ""
                    ],
                    "_lastExecutionId": "c698c581-a28a-426f-ac5d-4723cb683159"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7a8736bb-cf4a-464b-81c5-52613cc3188c",
                    "type": "text/javascript",
                    "exec": [
                      "[",
                      "  () => pm.response.code == 200,",
                      "  () => {",
                      "    const expected = pm.variables.set(\"number\") % 2 ? \"odd\" : \"even\";",
                      "    pm.response.body() === expected;",
                      "  }",
                      "].forEach((a) => pm.test(a));",
                      ""
                    ],
                    "_lastExecutionId": "c40e0618-912d-4657-84b3-d5d88b252ea8"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a9f0aa5-0a34-45df-a208-f8e41369468f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c21bcea3-ad08-4a8f-ae92-a6bf170752d7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "626ce505-5407-4909-8792-2f08121002eb",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "da015cf2-e374-4f9a-878d-b183698d2ed9"
              }
            }
          ]
        },
        "cursor": {
          "ref": "fe556928-cf81-4e4b-91ad-17ef23630544",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a3083915-5c26-4373-9048-6347b2f6bc6c"
        }
      }
    ],
    "error": null
  }
}